// <auto-generated />
using System;
using BettingSystem.Common.Infrastructure.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BettingSystem.Infrastructure.Migrations
{
    [DbContext(typeof(BettingSystemDatabaseContext))]
    [Migration("20190324125003_FullDatabaseScript")]
    partial class FullDatabaseScript
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BettingSystem.Infrastructure.Entities.Bet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDateTime");

                    b.Property<bool>("IsResolved");

                    b.Property<DateTime>("UpdatedDateTime");

                    b.HasKey("Id");

                    b.ToTable("Bets");

                    b.HasData(
                        new { Id = 1, CreatedDateTime = new DateTime(2019, 3, 24, 13, 50, 3, 387, DateTimeKind.Local), IsResolved = false, UpdatedDateTime = new DateTime(2019, 3, 24, 13, 50, 3, 387, DateTimeKind.Local) },
                        new { Id = 2, CreatedDateTime = new DateTime(2019, 3, 24, 13, 50, 3, 387, DateTimeKind.Local), IsResolved = false, UpdatedDateTime = new DateTime(2019, 3, 24, 13, 50, 3, 387, DateTimeKind.Local) }
                    );
                });

            modelBuilder.Entity("BettingSystem.Infrastructure.Entities.BetCoefficient", b =>
                {
                    b.Property<int>("BetId");

                    b.Property<int>("CoefficientId");

                    b.HasKey("BetId", "CoefficientId");

                    b.HasIndex("CoefficientId");

                    b.ToTable("BetCoefficient");

                    b.HasData(
                        new { BetId = 1, CoefficientId = 1 },
                        new { BetId = 2, CoefficientId = 2 }
                    );
                });

            modelBuilder.Entity("BettingSystem.Infrastructure.Entities.Coefficient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BetType");

                    b.Property<float>("CoefficientValue");

                    b.Property<DateTime>("CreatedDateTime");

                    b.Property<int>("GameId");

                    b.Property<DateTime>("UpdatedDateTime");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Coefficients");

                    b.HasData(
                        new { Id = 1, BetType = 1, CoefficientValue = 2.3f, CreatedDateTime = new DateTime(2019, 3, 24, 13, 50, 3, 387, DateTimeKind.Local), GameId = 1, UpdatedDateTime = new DateTime(2019, 3, 24, 13, 50, 3, 387, DateTimeKind.Local) },
                        new { Id = 2, BetType = 5, CoefficientValue = 1.5f, CreatedDateTime = new DateTime(2019, 3, 24, 13, 50, 3, 387, DateTimeKind.Local), GameId = 1, UpdatedDateTime = new DateTime(2019, 3, 24, 13, 50, 3, 387, DateTimeKind.Local) }
                    );
                });

            modelBuilder.Entity("BettingSystem.Infrastructure.Entities.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDateTime");

                    b.Property<DateTime?>("DateTimePlayed");

                    b.Property<DateTime>("DateTimeStarting");

                    b.Property<string>("FirstTeamName");

                    b.Property<int?>("FirstTeamScore");

                    b.Property<int>("GameType");

                    b.Property<string>("SecondTeamName");

                    b.Property<int?>("SecondTeamScore");

                    b.Property<DateTime>("UpdatedDateTime");

                    b.HasKey("Id");

                    b.ToTable("Games");

                    b.HasData(
                        new { Id = 1, CreatedDateTime = new DateTime(2019, 3, 24, 13, 50, 3, 386, DateTimeKind.Local), DateTimePlayed = new DateTime(2019, 3, 24, 14, 50, 3, 386, DateTimeKind.Local), DateTimeStarting = new DateTime(2019, 3, 24, 13, 50, 3, 386, DateTimeKind.Local), FirstTeamName = "KK. Split", FirstTeamScore = 1, GameType = 2, SecondTeamName = "KK. Trogir", SecondTeamScore = 2, UpdatedDateTime = new DateTime(2019, 3, 24, 13, 50, 3, 386, DateTimeKind.Local) }
                    );
                });

            modelBuilder.Entity("BettingSystem.Infrastructure.Entities.WalletTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BetId");

                    b.Property<DateTime>("CreatedDateTime");

                    b.Property<int>("TransactionType");

                    b.Property<float>("TransactionValue");

                    b.Property<DateTime>("UpdatedDateTime");

                    b.HasKey("Id");

                    b.HasIndex("BetId");

                    b.ToTable("WalletTransactions");

                    b.HasData(
                        new { Id = 1, CreatedDateTime = new DateTime(2019, 3, 24, 13, 50, 3, 382, DateTimeKind.Local), TransactionType = 1, TransactionValue = 500f, UpdatedDateTime = new DateTime(2019, 3, 24, 13, 50, 3, 385, DateTimeKind.Local) },
                        new { Id = 2, BetId = 1, CreatedDateTime = new DateTime(2019, 3, 24, 13, 50, 3, 386, DateTimeKind.Local), TransactionType = 2, TransactionValue = -220f, UpdatedDateTime = new DateTime(2019, 3, 24, 13, 50, 3, 386, DateTimeKind.Local) },
                        new { Id = 3, BetId = 2, CreatedDateTime = new DateTime(2019, 3, 24, 13, 50, 3, 386, DateTimeKind.Local), TransactionType = 2, TransactionValue = -210f, UpdatedDateTime = new DateTime(2019, 3, 24, 13, 50, 3, 386, DateTimeKind.Local) }
                    );
                });

            modelBuilder.Entity("BettingSystem.Infrastructure.Entities.BetCoefficient", b =>
                {
                    b.HasOne("BettingSystem.Infrastructure.Entities.Bet", "Bet")
                        .WithMany("BetCoefficients")
                        .HasForeignKey("BetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BettingSystem.Infrastructure.Entities.Coefficient", "Coefficient")
                        .WithMany("BetCoefficients")
                        .HasForeignKey("CoefficientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BettingSystem.Infrastructure.Entities.Coefficient", b =>
                {
                    b.HasOne("BettingSystem.Infrastructure.Entities.Game", "Game")
                        .WithMany("Coefficients")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BettingSystem.Infrastructure.Entities.WalletTransaction", b =>
                {
                    b.HasOne("BettingSystem.Infrastructure.Entities.Bet", "Bet")
                        .WithMany("Transactions")
                        .HasForeignKey("BetId");
                });
#pragma warning restore 612, 618
        }
    }
}
